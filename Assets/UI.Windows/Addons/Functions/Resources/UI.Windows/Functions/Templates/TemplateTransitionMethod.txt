		
		public class FlowFunction{FUNCTION_CALL_NAME}Routes : WindowRoutes {
			
			public FlowFunction{FUNCTION_CALL_NAME}Routes(WindowBase window, int index) : base(window, index) {}
			{TRANSITION_METHODS}
		}
		
		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowFunction{FUNCTION_CALL_NAME}(UnityEngine.Events.UnityAction<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds) {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(false, onFunctionEnds);
			
		}
		
		/// <summary>
		/// Call the Function {FUNCTION_CALL_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Function: {FUNCTION_NAME}
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual {CLASS_NAME_WITH_NAMESPACE} FlowHideFunction{FUNCTION_CALL_NAME}(UnityEngine.Events.UnityAction<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds) {
			
			return this.INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(true, onFunctionEnds);
			
		}
		
		private {CLASS_NAME_WITH_NAMESPACE} INTERNAL_FlowFunction{FUNCTION_CALL_NAME}(bool hide, UnityEngine.Events.UnityAction<FlowFunction{FUNCTION_CALL_NAME}Routes> onFunctionEnds, System.Action<{CLASS_NAME_WITH_NAMESPACE}> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem({FLOW_FROM_ID}, {FLOW_TO_ID});
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<{CLASS_NAME_WITH_NAMESPACE}>(
				(w) => WindowSystem.RegisterFunctionCallback(w, (index) => onFunctionEnds(new FlowFunction{FUNCTION_CALL_NAME}Routes(this, index))),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
		