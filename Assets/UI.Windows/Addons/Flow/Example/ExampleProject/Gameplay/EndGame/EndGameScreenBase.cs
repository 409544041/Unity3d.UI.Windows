//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UI.Windows Flow Addon.
//     You may not edit this file because of it's auto-generated by FlowCompiler.
//     See more: https://github.com/chromealex/Unity3d.UI.Windows
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.UI.Windows;
using UnityEngine.UI.Windows.Types;

namespace ExampleProject.UI.Gameplay.EndGame {

	public class EndGameScreenBase : LayoutWindowType {
		
		public class FlowFunctionLoaderRoutes : WindowRoutes {
			
			public FlowFunctionLoaderRoutes(WindowBase window, int index) : base(window, index) {}
					
			/// <summary>
			/// Flows to the Default.
			/// </summary>
			/// <returns>Default</returns>
			public virtual void FlowDefault(params object[] parameters) {
				
				WindowSystem.ShowDefault(parameters);
				
			}
			
		}
		
		/// <summary>
		/// Call the Function Loader.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Function: Loading
		/// </summary>
		/// <returns>Function root window</returns>
		public virtual ExampleProject.UI.Loader.Loading.LoadingScreen FlowFunctionLoader(UnityEngine.Events.UnityAction<FlowFunctionLoaderRoutes> onFunctionEnds, params object[] parameters) {
			
			ExampleProject.UI.Loader.Loading.LoadingScreen instance = null;
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(28, 40);
			if (item == null || item.transition == null) {
				
				instance = WindowSystem.Show<ExampleProject.UI.Loader.Loading.LoadingScreen>((window) => {
					
					WindowSystem.RegisterFunctionCallback(window, (index) => { onFunctionEnds(new FlowFunctionLoaderRoutes(this, index)); });
					
				}, parameters);
				
			} else {
				
				instance = WindowSystem.Show<ExampleProject.UI.Loader.Loading.LoadingScreen>((window) => {
					
					WindowSystem.RegisterFunctionCallback(window, (index) => { onFunctionEnds(new FlowFunctionLoaderRoutes(this, index)); });
					
				}, item.transition, item.transitionParameters, parameters);
				
			}
			
			return instance;
			
		}
		
		/// <summary>
		/// Flows to the {CLASS_NAME}.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Loader.Loading.LoadingScreen
		/// </summary>
		/// <returns>{CLASS_NAME}</returns>
		public virtual ExampleProject.UI.Loader.Loading.LoadingScreen FlowHideFunctionLoader(UnityEngine.Events.UnityAction<FlowFunctionLoaderRoutes> onFunctionEnds, params object[] parameters) {
			
			ExampleProject.UI.Loader.Loading.LoadingScreen instance = null;
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(28, 40);
			if (item == null || item.transition == null) {
				
				this.Hide();
				instance = WindowSystem.Show<ExampleProject.UI.Loader.Loading.LoadingScreen>((window) => {
					
					WindowSystem.RegisterFunctionCallback(window, (index) => { onFunctionEnds(new FlowFunctionLoaderRoutes(this, index)); });
					
				}, parameters);
				
			} else {
				
				this.Hide(item.transition, item.transitionParameters);
				instance = WindowSystem.Show<ExampleProject.UI.Loader.Loading.LoadingScreen>((window) => {
					
					WindowSystem.RegisterFunctionCallback(window, (index) => { onFunctionEnds(new FlowFunctionLoaderRoutes(this, index)); });
					
				}, item.transition, item.transitionParameters, parameters);
				
			}
			
			return instance;
			
		}
		
	}

}