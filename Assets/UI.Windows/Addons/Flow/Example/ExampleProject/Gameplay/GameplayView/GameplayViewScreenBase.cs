//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UI.Windows Flow Addon.
//     Do not change anything in this file because it was auto-generated by FlowCompiler.
//     See more: https://github.com/chromealex/Unity3d.UI.Windows
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.UI.Windows;
using UnityEngine.UI.Windows.Types;

namespace ExampleProject.UI.Gameplay.GameplayView {

	public class GameplayViewScreenBase : LayoutWindowType {
		
		/// <summary>
		/// Flows to the EndGame.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Gameplay.EndGame.EndGameScreen
		/// </summary>
		/// <returns>EndGame</returns>
		public virtual ExampleProject.UI.Gameplay.EndGame.EndGameScreen FlowEndGame() {
			
			return this.INTERNAL_FlowEndGame(false);
			
		}
		
		/// <summary>
		/// Flows to the EndGame.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Gameplay.EndGame.EndGameScreen
		/// </summary>
		/// <returns>EndGame</returns>
		public virtual ExampleProject.UI.Gameplay.EndGame.EndGameScreen FlowHideEndGame() {
			
			return this.INTERNAL_FlowEndGame(true);
			
		}
		
		private ExampleProject.UI.Gameplay.EndGame.EndGameScreen INTERNAL_FlowEndGame(bool hide, System.Action<ExampleProject.UI.Gameplay.EndGame.EndGameScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(25, 28);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Gameplay.EndGame.EndGameScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
				
		/// <summary>
		/// Flows to the GameplayHUD.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen
		/// </summary>
		/// <returns>GameplayHUD</returns>
		public virtual ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen FlowGameplayHUD() {
			
			return this.INTERNAL_FlowGameplayHUD(false);
			
		}
		
		/// <summary>
		/// Flows to the GameplayHUD.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen
		/// </summary>
		/// <returns>GameplayHUD</returns>
		public virtual ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen FlowHideGameplayHUD() {
			
			return this.INTERNAL_FlowGameplayHUD(true);
			
		}
		
		private ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen INTERNAL_FlowGameplayHUD(bool hide, System.Action<ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(25, 29);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Gameplay.GameplayHUD.GameplayHUDScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
		
	}

}