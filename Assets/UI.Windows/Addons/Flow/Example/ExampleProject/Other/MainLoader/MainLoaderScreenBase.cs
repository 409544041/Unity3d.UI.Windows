//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UI.Windows Flow Addon.
//     Do not change anything in this file because it was auto-generated by FlowCompiler.
//     See more: https://github.com/chromealex/Unity3d.UI.Windows
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.UI.Windows;
using UnityEngine.UI.Windows.Types;

namespace ExampleProject.UI.Other.MainLoader {

	public class MainLoaderScreenBase : LayoutWindowType {
		
		/// <summary>
		/// Flows to the GlobalMap.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen
		/// </summary>
		/// <returns>GlobalMap</returns>
		public virtual ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen FlowGlobalMap() {
			
			return this.INTERNAL_FlowGlobalMap(false);
			
		}
		
		/// <summary>
		/// Flows to the GlobalMap.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen
		/// </summary>
		/// <returns>GlobalMap</returns>
		public virtual ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen FlowHideGlobalMap() {
			
			return this.INTERNAL_FlowGlobalMap(true);
			
		}
		
		private ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen INTERNAL_FlowGlobalMap(bool hide, System.Action<ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(18, 1);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Menu.GlobalMap.GlobalMapScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
				
		/// <summary>
		/// Flows to the Background.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Other.Background.BackgroundScreen
		/// </summary>
		/// <returns>Background</returns>
		public virtual ExampleProject.UI.Other.Background.BackgroundScreen FlowBackground() {
			
			return this.INTERNAL_FlowBackground(false);
			
		}
		
		/// <summary>
		/// Flows to the Background.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Other.Background.BackgroundScreen
		/// </summary>
		/// <returns>Background</returns>
		public virtual ExampleProject.UI.Other.Background.BackgroundScreen FlowHideBackground() {
			
			return this.INTERNAL_FlowBackground(true);
			
		}
		
		private ExampleProject.UI.Other.Background.BackgroundScreen INTERNAL_FlowBackground(bool hide, System.Action<ExampleProject.UI.Other.Background.BackgroundScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(18, 32);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Other.Background.BackgroundScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
		
	}

}