//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the UI.Windows Flow Addon.
//     Do not change anything in this file because it was auto-generated by FlowCompiler.
//     See more: https://github.com/chromealex/Unity3d.UI.Windows
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using UnityEngine.UI.Windows;
using UnityEngine.UI.Windows.Types;

namespace ExampleProject.UI.Menu.GlobalMap {

	public class GlobalMapScreenBase : LayoutWindowType {
		
		/// <summary>
		/// Flows to the GameTypeChooser.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen
		/// </summary>
		/// <returns>GameTypeChooser</returns>
		public virtual ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen FlowGameTypeChooser() {
			
			return this.INTERNAL_FlowGameTypeChooser(false);
			
		}
		
		/// <summary>
		/// Flows to the GameTypeChooser.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen
		/// </summary>
		/// <returns>GameTypeChooser</returns>
		public virtual ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen FlowHideGameTypeChooser() {
			
			return this.INTERNAL_FlowGameTypeChooser(true);
			
		}
		
		private ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen INTERNAL_FlowGameTypeChooser(bool hide, System.Action<ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(1, 9);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Menu.GameTypeChooser.GameTypeChooserScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
				
		/// <summary>
		/// Flows to the Shop.
		/// Use this method to play transition effect on B window only.
		/// If you call Hide() on A window - it will hide with standard behaviour.
		/// Full Name: ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen
		/// </summary>
		/// <returns>Shop</returns>
		public virtual ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen FlowShop() {
			
			return this.INTERNAL_FlowShop(false);
			
		}
		
		/// <summary>
		/// Flows to the Shop.
		/// Hides current window.
		/// Use this method to play transition effect on both windows (A and B).
		/// Full Name: ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen
		/// </summary>
		/// <returns>Shop</returns>
		public virtual ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen FlowHideShop() {
			
			return this.INTERNAL_FlowShop(true);
			
		}
		
		private ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen INTERNAL_FlowShop(bool hide, System.Action<ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen> onParametersPassCall = null) {
			
			var item = UnityEngine.UI.Windows.Plugins.Flow.FlowSystem.GetAttachItem(1, 24);
			if (hide == true) this.Hide(item.transition, item.transitionParameters);
			return WindowSystem.Show<ExampleProject.UI.Menu.ShopOperations.Shop.ShopScreen>(
				(w) => w.SetFunctionIterationIndex(this.GetFunctionIterationIndex()),
				item.transition,
				item.transitionParameters,
				onParametersPassCall
			);
			
		}
				
		/// <summary>
		/// Request Social Module.
		/// Platform: Facebook (facebook.com)
		/// </summary>
		/// <returns>Social FB Module</returns>
		public virtual UnityEngine.UI.Windows.Plugins.Social.Modules.Impl.FB.FBModule GetSocialModule() {
			
			return UnityEngine.UI.Windows.Plugins.Social.Core.SocialSystem.instance.GetModule<UnityEngine.UI.Windows.Plugins.Social.Modules.Impl.FB.FBModule>();
			
		}
		
	}

}