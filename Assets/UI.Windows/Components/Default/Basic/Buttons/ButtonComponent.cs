#if UNITY_IPHONE || UNITY_ANDROID || UNITY_WP8 || UNITY_BLACKBERRY
#define UNITY_MOBILE
#endif
using UnityEngine;
using System.Collections;
using UnityEngine.UI.Windows;
using UnityEngine.UI;
using UnityEngine.Events;
using System;
using UnityEngine.UI.Windows.Components.Events;
using UnityEngine.EventSystems;
using UnityEngine.UI.Windows.Extensions;

namespace UnityEngine.UI.Windows.Components {

	public enum ColorState : byte {

		Normal,
		Highlighted,
		Pressed,
		Disabled,

	};

	public class ButtonComponent : ColoredComponent, IButtonComponent, IEventSystemHandler, IPointerEnterHandler, IPointerExitHandler {
		
		public override void Setup(IComponentParameters parameters) {
			
			base.Setup(parameters);
			
			var inputParameters = parameters as ButtonComponentParameters;
			{
				if (inputParameters != null) inputParameters.Setup(this as IButtonComponent);
			}

			#region macros UI.Windows.Initialization.TextComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
					
					if (inputParameters != null) inputParameters.Setup(this as ITextComponent);
	
				}
	#endregion

			#region macros UI.Windows.Initialization.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
					if (inputParameters != null) inputParameters.Setup(this as IImageComponent);
	
				}
	#endregion

		}

		public override void OnLocalizationChanged() {

			base.OnLocalizationChanged();

			#region macros UI.Windows.OnLocalizationChanged.TextComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
	
					if (this.lastTextLocalization == true) {
	
						this.SetText(this.lastTextLocalizationKey, this.lastTextLocalizationParameters);
	
					} else {
	
						if (this.text is UnityEngine.UI.Windows.Plugins.Localization.UI.LocalizationText) {
	
							(this.text as UnityEngine.UI.Windows.Plugins.Localization.UI.LocalizationText).OnLocalizationChanged();
	
						}
	
					}
	
				}
	#endregion

			#region macros UI.Windows.OnLocalizationChanged.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
					
					if (this.lastImageLocalization == true) {
	
						this.SetImage(this.lastImageLocalizationKey, this.lastImageLocalizationParameters);
	
					} else {
	
						if (this.image is UnityEngine.UI.Windows.Plugins.Localization.UI.LocalizationImage) {
	
							(this.image as UnityEngine.UI.Windows.Plugins.Localization.UI.LocalizationImage).OnLocalizationChanged();
	
						}
	
					}
	
				}
	#endregion

		}

		public override void OnInit() {

			base.OnInit();

			if (this.setDefaultNavigationModeOnStart == true) {

				this.SetNavigationMode(this.defaultNavigationMode);

			}

			#region macros UI.Windows.OnInit.TextComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
	
					if (this.textLocalizationKey.IsNone() == false) {
	
						this.SetText(this.textLocalizationKey);
	
					}
	
				}
	#endregion
			
			#region macros UI.Windows.OnInit.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
	
					if (this.imageLocalizationKey.IsNone() == false) {
	
						this.SetImage(this.imageLocalizationKey);
	
					}
	
				}
	#endregion

		}

		#region WindowComponent events
		public override void OnDeinit() {
			
			base.OnDeinit();
			
			#region macros UI.Windows.OnDeinit.TextComponent
			#endregion
			
			#region macros UI.Windows.OnDeinit.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
					
					this.Stop();
					
				}
	#endregion

			this.onState = null;
			this.onStateActive = false;
			
			if (this.button != null) this.button.onClick.RemoveListener(this.OnClick);
			this.callback.RemoveAllListeners();
			this.callbackButton.RemoveAllListeners();
			this.onHover.RemoveAllListeners();

		}
		
		public override void OnShowBegin() {
			
			base.OnShowBegin();
			
			this.onStateActive = true;

			if (this.selectByDefault == true) {

				this.Select();

			}
			
			#region macros UI.Windows.OnShowBegin.TextComponent
			#endregion

			#region macros UI.Windows.OnShowBegin.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
	
					if (this.playOnShow == true) {
						
						this.Play();
						
					}
					
				}
	#endregion

		}
		
		public override void OnHideEnd() {
			
			base.OnHideEnd();
			
			#region macros UI.Windows.OnDeinit.TextComponent
			#endregion
			
			#region macros UI.Windows.OnHideEnd.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	{
					
					this.Stop();
					
				}
	#endregion

			this.onStateActive = false;
			
		}

		public override void OnHideBegin() {
			
			base.OnHideBegin();
			
			this.OnPointerExit(null);
			
		}
		#endregion

		#region Button Base
		[Header("Button Component")]
		[SerializeField]
		protected Button button;

		public ComponentEvent callback = new ComponentEvent();
		private ComponentEvent<ButtonComponent> callbackButton = new ComponentEvent<ButtonComponent>();

		private System.Func<bool> onState;
		private bool oldState = false;
		private bool onStateActive = false;
		
		[SerializeField]
		protected bool selectByDefault;
		
		[SerializeField]
		private bool setDefaultNavigationModeOnStart = true;
		[SerializeField][ReadOnly("setDefaultNavigationModeOnStart", state: false)]
		private Navigation.Mode defaultNavigationMode = Navigation.Mode.None;
		
		public virtual IButtonComponent SetSelectByDefault(bool state) {
			
			this.selectByDefault = state;
			
			return this;
			
		}

		public IButtonComponent SetNavigationMode(Navigation.Mode mode) {

			if (this.button != null) {

				var nav = this.button.navigation;
				nav.mode = mode;
				this.button.navigation = nav;

			}

			return this;

		}
		
		public void SetStateColor(ColorState state, Color color) {
			
			var colors = this.button.colors;
			if (state == ColorState.Normal) colors.normalColor = color;
			if (state == ColorState.Highlighted) colors.highlightedColor = color;
			if (state == ColorState.Pressed) colors.pressedColor = color;
			if (state == ColorState.Disabled) colors.disabledColor = color;
			this.button.colors = colors;
			
		}
		
		public Color GetStateColor(ColorState state) {
			
			var colors = this.button.colors;
			if (state == ColorState.Normal) return colors.normalColor;
			if (state == ColorState.Highlighted) return colors.highlightedColor;
			if (state == ColorState.Pressed) return colors.pressedColor;
			if (state == ColorState.Disabled) return colors.disabledColor;

			return default(Color);

		}

		public void Select() {
			
			this.GetSelectable().Select();
			
		}

		public virtual Selectable GetSelectable() {

			return this.button;
			
		}

		public IButtonComponent SetEnabledState(System.Func<bool> onState) {

			this.onState = onState;
			this.oldState = this.onState();
			this.onStateActive = true;

			return this;

		}

		public virtual void LateUpdate() {

			if (this.onStateActive == true && this.onState != null) {

				var newState = this.onState();
				if (newState != this.oldState) this.SetEnabledState(newState);
				this.oldState = newState;

			}

		}

		public virtual IButtonComponent SetEnabledState(bool state) {

			if (state == true) {

				this.SetEnabled();

			} else {

				this.SetDisabled();

			}

			return this;

		}

		public virtual IButtonComponent SetDisabled() {
			
			if (this.button != null) {
				
				if (this.button.interactable != false) {
					
					this.button.interactable = false;
					this.OnInteractableChanged();
					
				}
				
			}

			return this;

		}

		public virtual IButtonComponent SetEnabled() {
			
			if (this.button != null) {

				if (this.button.interactable != true) {

					this.button.interactable = true;
					this.OnInteractableChanged();

				}

			}

			return this;

		}

		public bool IsInteractable() {

			return (this.button != null ? this.button.IsInteractable() : false);

		}

		public virtual void OnInteractableChanged() {

		}

		public virtual IButtonComponent SetButtonColor(Color color) {

			if (this.button != null) {

				this.button.targetGraphic.color = color;

			}

			return this;

		}

		public virtual IButtonComponent SetCallback(UnityAction callback) {

            this.callback.RemoveAllListeners();
            this.callback.AddListenerDistinct(callback);
			this.callbackButton.RemoveAllListeners();

			this.button.onClick.RemoveListener(this.OnClick);
			this.button.onClick.AddListener(this.OnClick);

			return this;

		}
		
		public virtual IButtonComponent AddCallback(UnityAction callback) {
			
			this.callback.AddListenerDistinct(callback);
			this.button.onClick.RemoveListener(this.OnClick);
			this.button.onClick.AddListener(this.OnClick);

			return this;

		}

		public virtual IButtonComponent SetCallback(UnityAction<ButtonComponent> callback) {

            this.callbackButton.RemoveAllListeners();
            this.callbackButton.AddListenerDistinct(callback);
			this.callback.RemoveAllListeners();

            this.button.onClick.RemoveAllListeners();
            // this.button.onClick.RemoveListener(this.OnClick);
			this.button.onClick.AddListener(this.OnClick);

			return this;

		}
		
		public virtual IButtonComponent AddCallback(UnityAction<ButtonComponent> callback) {
			
			this.callbackButton.AddListenerDistinct(callback);
			this.button.onClick.RemoveListener(this.OnClick);
			this.button.onClick.AddListener(this.OnClick);

			return this;

		}

		public virtual void OnClick() {

			if (this.GetWindow().GetState() != WindowObjectState.Shown &&
			    this.GetWindow().GetState() != WindowObjectState.Showing) {

				#if UNITY_EDITOR || DEBUGBUILD
				Debug.LogWarningFormat("Can't send click on `{0}` state. Be sure `{1}` window has the `Shown` or `Showing` state.", this.GetWindow().GetState(), this.GetWindow().name);
				#endif
				return;

			}

			this.sfxOnClick.Play();

			if (this.callback != null) this.callback.Invoke();
			if (this.callbackButton != null) this.callbackButton.Invoke(this);

		}
		#endregion

		#region Audio
		[Header("Audio")]
		[SerializeField]
		private Audio.Component sfxOnClick = new Audio.Component();
		[SerializeField]
		private Audio.Component sfxOnEnter = new Audio.Component();
		[SerializeField]
		private Audio.Component sfxOnLeave = new Audio.Component();

		public IButtonComponent SetSFX(PointerEventState state, Audio.Component data) {

			if (state == PointerEventState.Click) {

				this.sfxOnClick = data;

			} else if (state == PointerEventState.Enter) {

				this.sfxOnEnter = data;

			} else if (state == PointerEventState.Leave) {

				this.sfxOnLeave = data;

			}

			return this;

		}
		#endregion

		#region Hover
		[Header("Hover Actions")]
		[SerializeField]
		private bool hoverIsActive = true;
		[SerializeField]
		private bool hoverOnAnyPointerState = false;
		[SerializeField]
		private bool hoverOnAnyButtonState = false;
		public ComponentEvent<bool> onHover = new ComponentEvent<bool>();

		[HideInInspector]
		private bool tempHoverState = false;

		public IButtonComponent SetHoverState(bool state) {
			
			this.hoverIsActive = state;

			return this;

		}
		
		public IButtonComponent SetHoverOnAnyPointerState(bool state) {
			
			this.hoverOnAnyPointerState = state;

			return this;

		}
		
		public IButtonComponent SetHoverOnAnyButtonState(bool state) {
			
			this.hoverOnAnyButtonState = state;

			return this;

		}

		public virtual IButtonComponent SetCallbackHover(UnityAction<bool> onHover) {
			
			this.onHover.AddListenerDistinct(onHover);

			return this;

		}

		private bool ValidateHoverPointer(PointerEventData eventData) {

			if (this.hoverIsActive == false) return false;
			if (this.button != null && this.hoverOnAnyButtonState == false && this.button.interactable == false) return false;
			if (this.hoverOnAnyPointerState == false && WindowSystemInput.GetPointerState() != PointerState.Default) return false;

			return true;

		}

		public void OnPointerEnter(PointerEventData eventData) {
			
			this.tempHoverState = false;

			if (this.ValidateHoverPointer(eventData) == false) return;
			
			this.sfxOnEnter.Play();
			this.tempHoverState = true;
			this.onHover.Invoke(true);
			
		}
		
		public void OnPointerExit(PointerEventData eventData) {

			if (this.tempHoverState == false) return;
			
			this.sfxOnLeave.Play();
			this.onHover.Invoke(false);
			this.tempHoverState = false;

		}

		#endregion

		#region macros UI.Windows.ImageComponent (overrideColor:override)

	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	[Header("Image Component")]
			[SerializeField]
			private bool preserveAspect;
	
			[SerializeField]
			private Image image;
			
			[SerializeField]
			private RawImage rawImage;
	
			public UnityEngine.UI.Windows.Plugins.Localization.LocalizationKey imageLocalizationKey;
	
			[ReadOnly("rawImage", null)]
			[SerializeField][UnityEngine.Serialization.FormerlySerializedAs("playOnStart")]
			private bool playOnShow;
			[ReadOnly("rawImage", null)]
			[SerializeField]
			private bool loop;
	
			public IImageComponent SetPreserveAspectState(bool state) {
	
				this.preserveAspect = state;
	
				return this;
	
			}
			
			public IImageComponent SetLoop(bool state) {
				
				this.loop = state;
				
				return this;
	
			}
	
			public bool IsMovie() {
				
				var image = this.GetRawImageSource();
				if (image == null) return false;
				
				return image.mainTexture is MovieTexture;
				
			}
	
			public IImageComponent SetMovieTexture(Texture texture) {
	
				this.Stop();
				this.SetImage(texture);
				
				return this;
	
			}
	
			public bool GetPlayOnShow() {
				
				return this.playOnShow;
				
			}
			
			public IImageComponent SetPlayOnShow(bool state) {
				
				this.playOnShow = state;
				
				return this;
	
			}
			
			public bool IsPlaying() {
	
				return MovieSystem.IsPlaying(this);
	
			}
	
			public IImageComponent Play() {
	
				return this.Play(this.loop);
	
			}
	
			public IImageComponent Play(bool loop) {
	
				MovieSystem.Play(this, loop);
	
				return this;
	
			}
	
			public IImageComponent Stop() {
	
				MovieSystem.Stop(this);
	
				return this;
	
			}
	
			public IImageComponent Pause() {
	
				MovieSystem.Pause(this);
	
				return this;
	
			}
	
			public IImageComponent ResetImage() {
				
				if (this.image != null) {
					
					this.image.sprite = null;
					
				}
				
				if (this.rawImage != null) {
	
					this.Stop();
					this.rawImage.texture = null;
					
				}
				
				return this;
	
			}
			
			public Image GetImageSource() {
				
				return this.image;
				
			}
			
			public RawImage GetRawImageSource() {
				
				return this.rawImage;
				
			}
	
			private bool lastImageLocalization = false;
			private Plugins.Localization.LocalizationKey lastImageLocalizationKey;
			private object[] lastImageLocalizationParameters;
			public IImageComponent SetImage(UnityEngine.UI.Windows.Plugins.Localization.LocalizationKey key, params object[] parameters) {
	
				this.lastImageLocalization = true;
				this.lastImageLocalizationKey = key;
				this.lastImageLocalizationParameters = parameters;
	
				this.SetImage(UnityEngine.UI.Windows.Plugins.Localization.LocalizationSystem.GetSprite(key, parameters));
				
				return this;
	
			}
	
			public IImageComponent SetImage(ImageComponent source) {
				
				if (source.GetImageSource() != null) this.SetImage(source.GetImageSource().sprite);
				if (source.GetRawImageSource() != null) this.SetImage(source.GetRawImageSource().texture);
				
				return this;
	
			}
	
			public IImageComponent SetImage(Sprite sprite, bool withPivotsAndSize = false) {
	
				this.SetImage(sprite, this.preserveAspect, withPivotsAndSize);
				
				return this;
	
			}
	
			public IImageComponent SetImage(Sprite sprite, bool preserveAspect, bool withPivotsAndSize = false) {
				
				if (this.image != null) {
	
					this.image.sprite = sprite;
					this.image.preserveAspect = preserveAspect;
	
					if (withPivotsAndSize == true && sprite != null) {
	
						var rect = (this.transform as RectTransform);
	
						rect.sizeDelta = sprite.rect.size;
						rect.pivot = sprite.GetPivot();
						rect.anchoredPosition = Vector2.zero;
	
					}
	
				}
				
				return this;
	
			}
	
			public IImageComponent SetImage(Texture texture) {
	
				this.SetImage(texture, this.preserveAspect);
				
				return this;
	
			}
	
			public IImageComponent SetImage(Texture texture, bool preserveAspect) {
				
				if (this.rawImage != null) {
	
					this.rawImage.texture = texture;
					if (this.preserveAspect == true) ME.Utilities.PreserveAspect(this.rawImage);
	
				}
				
				return this;
	
			}
			
			public override Color GetColor() {
				
				Color color = Color.white;
				if (this.image != null) {
					
					color = this.image.color;
					
				} else if (this.rawImage != null) {
					
					color = this.rawImage.color;
					
				}
	
				return color;
	
			}
	
			public override void SetColor(Color color) {
	
				if (this.image != null) {
					
					this.image.color = color;
					
				} else if (this.rawImage != null) {
					
					this.rawImage.color = color;
					
				}
	
			}
	
			public IImageComponent SetAlpha(float value) {
	
				var color = this.GetColor();
				color.a = value;
				this.SetColor(color);
				
				return this;
	
			}
	
			public IImageComponent SetMaterial(Material material) {
	
				if (this.image != null) {
	
					this.image.material = material;
					this.image.SetMaterialDirty();
	
				} else if (this.rawImage != null) {
	
					this.rawImage.material = material;
					this.rawImage.SetMaterialDirty();
	
				}
				
				return this;
	
			}
	#endregion

		#region macros UI.Windows.TextComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	[Header("Text Component")]
			[SerializeField]
			private Text text;
			[SerializeField]
			private TextValueFormat valueFormat;
			[SerializeField][BitMask(typeof(FullTextFormat))]
			private FullTextFormat fullTextFormat;
			[SerializeField][BitMask(typeof(RichTextFlags))]
			private RichTextFlags richTextFlags = RichTextFlags.Color | RichTextFlags.Bold | RichTextFlags.Italic | RichTextFlags.Size | RichTextFlags.Material | RichTextFlags.Quad;
	
			public UnityEngine.UI.Windows.Plugins.Localization.LocalizationKey textLocalizationKey;
	
			public ITextComponent SetBestFit(bool state, int minSize = 10, int maxSize = 40) {
				
				if (this.text != null) {
					
					this.text.resizeTextForBestFit = state;
					this.text.resizeTextMinSize = minSize;
					this.text.resizeTextMaxSize = maxSize;
					
				}
	
				return this;
	
			}
			
			public ITextComponent SetBestFitState(bool state) {
				
				if (this.text != null) this.text.resizeTextForBestFit = state;
	
				return this;
	
			}
			
			public ITextComponent SetBestFitMinSize(int size) {
				
				if (this.text != null) this.text.resizeTextMinSize = size;
	
				return this;
	
			}
			
			public ITextComponent SetBestFitMaxSize(int size) {
				
				if (this.text != null) this.text.resizeTextMaxSize = size;
	
				return this;
	
			}
	
			public ITextComponent SetFont(Font font) {
				
				if (this.text != null) this.text.font = font;
	
				return this;
	
			}
	
			public ITextComponent SetFontSize(int fontSize) {
				
				if (this.text != null) this.text.fontSize = fontSize;
	
				return this;
	
			}
	
			public ITextComponent SetLineSpacing(float value) {
				
				if (this.text != null) this.text.lineSpacing = value;
	
				return this;
	
			}
			
			public ITextComponent SetRichText(bool state) {
				
				if (this.text != null) this.text.supportRichText = state;
	
				return this;
	
			}
			
			public ITextComponent SetFontStyle(FontStyle fontStyle) {
				
				if (this.text != null) this.text.fontStyle = fontStyle;
	
				return this;
	
			}
			
			public float GetContentHeight(float heightPadding = 0f) {
				
				if (this.text == null) return 0f;
				
				return this.GetContentHeight(this.GetText(), heightPadding);
				
			}
			
			public float GetContentHeight(string text, float heightPadding = 0f) {
				
				if (this.text == null) return 0f;
				
				return this.GetContentHeight(text, (this.transform.root as RectTransform).rect.size) + heightPadding;
				
			}
	
			public float GetContentHeight(string text, Vector2 containerSize) {
	
				if (this.text == null) return 0f;
	
				var settings = this.text.GetGenerationSettings(containerSize);
				return this.text.cachedTextGenerator.GetPreferredHeight(text, settings);
	
			}
			
			public ITextComponent SetFullTextFormat(FullTextFormat format) {
				
				this.fullTextFormat = format;
				
				return this;
				
			}
	
			public ITextComponent SetValueFormat(TextValueFormat format) {
	
				this.valueFormat = format;
	
				return this;
	
			}
			
			public ITextComponent SetValue(long value) {
				
				this.SetValue(value, this.valueFormat);
	
				return this;
	
			}
			
			public ITextComponent SetValue(int value) {
				
				this.SetValue(value, this.valueFormat);
	
				return this;
	
			}
	
			public ITextComponent SetValue(long value, TextValueFormat format) {
				
				this.SetText(TextComponent.FormatValue(value, format));
	
				return this;
	
			}
	
			public ITextComponent SetValue(int value, TextValueFormat format) {
				
				this.SetText(TextComponent.FormatValue(value, format));
	
				return this;
	
			}
	
			public ITextComponent SetTextVerticalOverflow(VerticalWrapMode mode) {
				
				if (this.text != null) this.text.verticalOverflow = mode;
	
				return this;
	
			}
			
			public ITextComponent SetTextHorizontalOverflow(HorizontalWrapMode mode) {
				
				if (this.text != null) this.text.horizontalOverflow = mode;
	
				return this;
	
			}
	
			public ITextComponent SetTextAlignment(TextAnchor anchor) {
				
				if (this.text != null) this.text.alignment = anchor;
	
				return this;
	
			}
	
			public string GetText() {
	
				return (this.text != null) ? this.text.text : string.Empty;
	
			}
	
			private bool lastTextLocalization = false;
			private Plugins.Localization.LocalizationKey lastTextLocalizationKey;
			private object[] lastTextLocalizationParameters;
			public ITextComponent SetText(Plugins.Localization.LocalizationKey key, params object[] parameters) {
	
				this.lastTextLocalization = true;
				this.lastTextLocalizationKey = key;
				this.lastTextLocalizationParameters = parameters;
	
				return this.SetText(Plugins.Localization.LocalizationSystem.Get(key, parameters));
	
			}
	
			public ITextComponent SetText(string text) {
	
				if (this.text != null) {
	
					if (this.text.supportRichText == true) {
	
						text = TextComponent.ParseRichText(text, this.richTextFlags);
	
					}
	
					text = TextComponent.FullTextFormat(text, this.fullTextFormat);
	
					this.text.text = text;
	
				}
	
				return this;
	
			}
	
			public virtual ITextComponent SetTextAlpha(float value) {
	
				var color = this.GetTextColor();
				color.a = value;
				this.SetTextColor(color);
	
				return this;
	
			}
	
			public virtual ITextComponent SetTextColor(Color color) {
				
				if (this.text != null) this.text.color = color;
	
				return this;
	
			}
			
			public virtual Color GetTextColor() {
	
				if (this.text == null) return Color.white;
	
				return this.text.color;
				
			}
	#endregion

		#if UNITY_EDITOR
		public override void OnValidateEditor() {

			base.OnValidateEditor();

			if (this.gameObject.activeSelf == false) return;

			var buttons = this.GetComponentsInChildren<Button>(true);
			if (buttons.Length == 1) this.button = buttons[0];

			#region macros UI.Windows.Editor.TextComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	var texts = this.GetComponentsInChildren<Text>(true);
				if (texts.Length == 1) this.text = texts[0];
	
				if (this.valueFormat != TextValueFormat.None) {
	
					this.SetValue(999999L);
	
				}
	#endregion

			#region macros UI.Windows.Editor.ImageComponent 
	/*
	 * This code is auto-generated by Macros Module
	 * Do not change anything
	 */
	if (this.image == null) this.image = this.GetComponent<Image>();
				if (this.rawImage == null) this.rawImage = this.GetComponent<RawImage>();
	#endregion

		}
		#endif

	}

}
